{
  "env": {
    "browser": true,
    "es2021": true,
    "node": true,
    "jest": true
  },
  "extends": [
    "plugin:@typescript-eslint/recommended"
  ],
  "overrides": [],
  "plugins": [
    "@typescript-eslint"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module",
    "project": "./tsconfig.json"
  },
  "rules": {
    "@typescript-eslint/no-misused-promises": [
      "error",
      {
        "checksVoidReturn": false
      }
    ],
    "no-unused-vars": 0,
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "ignoreRestSiblings": true
      }
    ],
    "no-redeclare": "off",
    "@typescript-eslint/no-redeclare": [
      "error",
      {
        "ignoreDeclarationMerge": true
      }
    ],
    "no-undef": "off",
    "no-shadow": "off",
    "no-use-before-define": "off",
    "@typescript-eslint/no-use-before-define": [
      "error",
      "nofunc"
    ],
    "@typescript-eslint/ban-types": [
      "error",
      {
        "types": {
          "Function": false
        },
        "extendDefaults": true
      }
    ],
    "@typescript-eslint/no-floating-promises": "error",
    "@typescript-eslint/await-thenable": "error",
    "@typescript-eslint/require-await": "error",
    "@typescript-eslint/consistent-type-exports": "error",
    "@typescript-eslint/consistent-type-imports": "error",
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "typeLike",
        "format": [
          "PascalCase"
        ],
        "filter": {
          "regex": "^(__String|[A-Za-z]+_[A-Za-z]+)$",
          "match": false
        }
      },
      {
        "selector": "interface",
        "format": [
          "PascalCase"
        ],
        "filter": {
          "regex": "^I(Arguments|TextWriter|O([A-Z][a-z]+[A-Za-z]*)?)$",
          "match": false
        }
      },
      {
        "selector": "variable",
        "format": [
          "camelCase",
          "PascalCase",
          "UPPER_CASE"
        ],
        "leadingUnderscore": "allow",
        "filter": {
          "regex": "^(_{1,2}filename|_{1,2}dirname|_+|[A-Za-z]+_[A-Za-z]+)$",
          "match": false
        }
      },
      {
        "selector": "function",
        "format": [
          "camelCase",
          "PascalCase"
        ],
        "leadingUnderscore": "allow",
        "filter": {
          "regex": "^[A-Za-z]+_[A-Za-z]+$",
          "match": false
        }
      },
      {
        "selector": "parameter",
        "format": [
          "camelCase"
        ],
        "leadingUnderscore": "allow",
        "filter": {
          "regex": "^(_+|[A-Za-z]+_[A-Z][a-z]+)$",
          "match": false
        }
      },
      {
        "selector": "method",
        "format": [
          "camelCase",
          "PascalCase"
        ],
        "leadingUnderscore": "allow",
        "filter": {
          "regex": "^([0-9]+|[A-Za-z]+_[A-Za-z]+)$",
          "match": false
        }
      },
      {
        "selector": "memberLike",
        "format": [
          "camelCase"
        ],
        "leadingUnderscore": "allow",
        "filter": {
          "regex": "^([0-9]+|[A-Za-z]+_[A-Za-z]+)$",
          "match": false
        }
      },
      {
        "selector": "enumMember",
        "format": [
          "camelCase",
          "PascalCase"
        ],
        "leadingUnderscore": "allow",
        "filter": {
          "regex": "^[A-Za-z]+_[A-Za-z]+$",
          "match": false
        }
      },
      {
        "selector": "property",
        "format": null
      }
    ],
    "@typescript-eslint/unified-signatures": "error",
    "@typescript-eslint/no-unused-expressions": [
      "error",
      {
        "allowTernary": true
      }
    ],
    "@typescript-eslint/ban-ts-comment": "error",
    "@typescript-eslint/class-literal-property-style": "error",
    "@typescript-eslint/consistent-indexed-object-style": "error",
    "@typescript-eslint/no-duplicate-enum-values": "error",
    "@typescript-eslint/no-empty-function": "error",
    "@typescript-eslint/no-namespace": "error",
    "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
    "@typescript-eslint/no-var-requires": "error",
    "@typescript-eslint/no-empty-interface": "error",
    "@typescript-eslint/no-explicit-any": "error",
    "@typescript-eslint/no-inferrable-types": "error",
    "@typescript-eslint/consistent-type-assertions": "error",
    "@typescript-eslint/func-call-spacing": [
      "error",
      "never"
    ],
    "@typescript-eslint/no-array-constructor": "error",
    "@typescript-eslint/no-extraneous-class": "error",
    "@typescript-eslint/no-for-in-array": "error",
    "@typescript-eslint/no-misused-new": "error",
    "@typescript-eslint/no-non-null-assertion": "error",
    "@typescript-eslint/no-unnecessary-qualifier": "error",
    "@typescript-eslint/no-unnecessary-type-assertion": "error",
    "@typescript-eslint/no-useless-constructor": "error",
    "@typescript-eslint/prefer-function-type": "error",
    "@typescript-eslint/prefer-includes": "error",
    "@typescript-eslint/prefer-string-starts-ends-with": "error",
    "@typescript-eslint/promise-function-async": "error",
    "@typescript-eslint/require-array-sort-compare": "error"
  }
}